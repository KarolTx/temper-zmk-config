/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/modifiers.h> // Added for MOD_LSFT, MOD_RSFT, etc.
#include <dt-bindings/zmk/hid_usage.h> // Added for CAPSWORD

#define DEFAULT 0
#define GAME 1
#define NUM 2
#define NAV 3
#define FUN 4

#define _______ &trans // Changed from '______' for consistency and readability

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM NAV>;
            then-layer = <FUN>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            // Removed 'keep-mods = <(MOD_RSFT)>;' as it's typically not needed
            // for a simple Shift + Backspace = Delete functionality and can be confusing.
            // If you specifically need RShift to be kept active during the DELETE,
            // then you would re-add it.
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            // This behavior will trigger 'Left Alt + Backspace' when either
            // Left Shift or Right Shift is held along with the key.
            // Remember that 'LA()' refers to Left Alt. If you intended for
            // a different modifier (e.g., Left GUI/Windows key, or Left Control)
            // for a "Super Backspace" function (like deleting a word), adjust 'mods'
            // accordingly (e.g., MOD_LGUI, MOD_LCTRL).
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
            // Current behavior: If LSHFT is pressed *by itself*, it sends LSHFT.
            // If LSHFT is pressed *along with any other modifier* (e.g., LSHFT + LCTRL),
            // then it will activate &caps_word.
            //
            // For a "Smart Shift" that activates Caps Word on hold and sends Shift on tap,
            // a 'zmk,behavior-hold-tap' is generally more intuitive.
            // Example of a hold-tap smart shift (if you prefer this):
            // smart_shft: smart_shift {
            //     compatible = "zmk,behavior-hold-tap";
            //     #binding-cells = <2>;
            //     tapping-term-ms = <200>; // Adjust tap-hold delay as needed
            //     global-binding = <&kp LSHFT>, <&caps_word>;
            // };
            // In the keymap, you would then use: `&smart_shft LSHFT CAPS_WORD`
        };

        // These mod-morphs for symbols are well-defined and useful.
        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT)>;
        };
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT)>;
        };
        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT)>;
        };
        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LSFT)>;
        };
        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp Q           &kp W           &kp E           &kp R           &kp T                 &kp Y           &kp U           &kp I           &kp O           &kp P
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp A           &kp S           &kp D           &kp F           &kp G                 &kp H           &kp J           &kp K           &kp L           &kp SEMI
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp Z           &kp X           &kp C           &kp V           &kp B                 &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                  &kp LGUI        &mo NUM         &smart_shft           &kp SPACE       &mo NAV         &to DEFAULT
//                                ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        game_layer {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp TAB         &kp Q           &kp W           &kp E           &kp R                 _______         _______         _______         _______         _______
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp LSHFT       &kp A           &kp S           &kp D           &kp F                 _______         _______         _______         _______         _______
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp LCTRL       &kp Z           &kp X           &kp C           &kp V                 _______         _______         _______         _______         _______
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                  &kp ESC         _______         &kp SPACE             _______         _______         _______
//                                ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        num_layer {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp TILDE       &kp AT          &kp LBRC        &kp RBRC        &kp PRCNT             &kp STAR        &kp N7          &kp N8          &kp N9          &kp MINUS
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp CARET       &kp HASH        &kp LPAR        &kp RPAR        &kp DLLR              &kp UNDER       &kp N4          &kp N5          &kp N6          &kp PLUS
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &amps_morph     &kp LT          &kp LBKT        &kp RBKT        &kp GT                &slh_morph      &kp N1          &kp N2          &kp N3          &kp EQUAL
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                  _______         _______         _______               &kp N0          _______         _______
//                                ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        nav_layer {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    _______         _______         _______         _______         _______               &kp DEL         &kp HOME        &kp END         &kp TAB         &kp BSPC
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &sk LSHFT       &sk LCTRL       &sk LALT        &sk LGUI        _______               &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &gresc
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    _______         _______         _______         _______         _______               _______         &kp RET         _______         _______         _______
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                  _______         _______         _______               _______         _______         _______
//                                ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
            >;
        };

        fun_layer {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &tog GAME       &kp K_MUTE      &kp C_VOL_DN    &kp C_VOL_UP    &out OUT_USB          _______         &kp F7          &kp F8          &kp F9          &kp F12
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4          _______         &kp F4          &kp F5          &kp F6          &kp F11
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &bt BT_CLR      &kp C_PREV      &kp C_PP        &kp C_NEXT      &out OUT_BLE          _______         &kp F1          &kp F2          &kp F3          &kp F10
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                  _______         _______         _______               _______         _______         _______
//                                ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
            >;
        };
    };
};

